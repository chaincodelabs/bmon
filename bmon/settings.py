"""
Django settings for bmon project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

HOSTNAME = os.environ.get('BMON_HOSTNAME', 'FIXME')
TESTING = bool(os.environ.get('BMON_TESTING', False))

# Only bitcoind-monitoring nodes have a local Redis cache.
REDIS_LOCAL_URL = os.environ.get('BMON_REDIS_LOCAL_URL')
REDIS_LOCAL_HOST = os.environ.get('BMON_REDIS_LOCAL_HOST')

# All installations must know about the central Redis instance.
REDIS_SERVER_URL = os.environ.get('BMON_REDIS_SERVER_URL', 'FIXME')
REDIS_SERVER_HOST = os.environ.get('BMON_REDIS_HOST', 'FIXME')

BITCOIN_RPC_HOST = os.environ.get('BITCOIN_RPC_HOST')
BITCOIN_RPC_USER = os.environ.get('BITCOIN_RPC_USER')
BITCOIN_RPC_PASSWORD = os.environ.get('BITCOIN_RPC_PASSWORD')
BITCOIN_RPC_PORT = os.environ.get('BITCOIN_RPC_PORT')

# GCP credentials for uploading mempool activity.
CHAINCODE_GCP_CRED_PATH = os.environ.get('CHAINCODE_GCP_CRED_PATH')
CHAINCODE_GCP_BUCKET = 'bmon-mempool-log-uploads'

# For testing
LOCALHOST_AUTH_TOKEN = '4396049cdfe946f88ec63da115cbcfcf'

# The location we write
MEMPOOL_ACTIVITY_CACHE_PATH = Path(os.environ.get(
    'MEMPOOL_ACTIVITY_CACHE_PATH', '/mempool-activity-cache'))

BITCOIND_LOG_PATH = os.environ.get('BMON_BITCOIND_LOG_PATH')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wtsk76*1ci%=)05y^-t-9^0y^y1ku3iunp2(h&6*qo@vxzv#n3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('BMON_DEBUG') == "1"

ALLOWED_HOSTS = ['*']

NO_LOG = {
    'level': 'WARNING',
    'handlers': [],
    'propagate': False,
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)s [%(levelname)s] %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
        # Add Handler for Sentry for `warning` and above
        # 'sentry': {
        #     'level': 'WARNING',
        #     'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        # },
    },
    'loggers': {
        '': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': [
                'console',
                # 'sentry',
            ],
        },
        'bitcoin-rpc': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': [
                'console',
                # 'sentry',
            ],
        },
        'huey': NO_LOG,
        'parso': NO_LOG,
        'clii': NO_LOG,
    },
}


INSTALLED_APPS = [
    'bmon',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bmon.urls'

SHARED_WITH_FRONTEND = BASE_DIR / 'frontend-build'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [SHARED_WITH_FRONTEND],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bmon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'bmon'),
        'USER': os.environ.get('DB_USERNAME', 'bmon'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'FIXME'),
        'HOST': os.environ.get('DB_HOST', 'FIXME'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles-build"
STATICFILES_DIRS = [
    os.path.join(os.path.dirname(__file__), 'static'),
    SHARED_WITH_FRONTEND,
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SENTRY_DSN = os.environ.get('SENTRY_DSN')

if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],

        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production,
        traces_sample_rate=1.0,

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,

        # By default the SDK will try to use the SENTRY_RELEASE
        # environment variable, or infer a git commit
        # SHA as release, however you may want to set
        # something more human-readable.
        # release="myapp@1.0.0",
        server_name=HOSTNAME,
    )
