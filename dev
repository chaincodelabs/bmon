#!/usr/bin/env python3

import json
import subprocess

import clii

cli = clii.App()


def sh(cmd, **kwargs):
    return subprocess.run(cmd, shell=True, **kwargs)


def brpc(cmd, **kwargs):
    return sh("docker-compose exec bitcoind "
              f"bitcoin-cli -regtest -datadir=/bitcoin/data {cmd}", **kwargs)


@cli.cmd
def bitcoinrpc(*cmd):
    return brpc(' '.join(cmd))


@cli.cmd
def generateblock():
    wallets = json.loads(brpc("listwallets", capture_output=True).stdout)
    if 'test' not in wallets:
        brpc("createwallet test false false '' false true true")

    if '"test"' not in brpc("getwalletinfo", capture_output=True, text=True).stdout:
        brpc("loadwallet test")

    sh("docker-compose exec bitcoind bitcoin-cli -regtest -datadir=/bitcoin/data -generate")


@cli.cmd
def managepy(*cmd):
    sh(f"docker-compose run --rm shell python manage.py {' '.join(cmd)}")


@cli.cmd
def shell():
    managepy('shell')


@cli.cmd
def reup(service: str = "", rebuild_docker: bool = False, logs: bool = False):
    sh(f"docker-compose down {service} ; docker-compose rm -f {service} ")
    if rebuild_docker:
        sh("docker-compose build")

    sh(f"docker-compose up -d {service}")

    if logs:
        sh(f"docker-compose logs -f {service}")


@cli.cmd
def watchlogs():
    """Tail interesting logs."""
    sh("docker-compose logs -f bitcoind server-task-worker "
       "bitcoind-task-worker bitcoind-watcher bitcoind-mempool-worker")


@cli.cmd
def cleardata():
    sh("rm -fr services/dev/*")
    sh("bmon-config")


@cli.cmd
def test():
    """Run automated tests."""
    sh("docker-compose run --rm test pytest bmon")


@cli.cmd
def watchjs():
    """Watch the frontend javascript and rebuild as necessary."""
    sh("docker-compose run --rm js yarn run start")


if __name__ == "__main__":
    cli.run()
